// оголошення та використання масиву дійсних чисел розміром 3*4
float[,] M = new float[3, 4]; // виділити пам'ять для масиву

// заповнення масиву довільними значеннями
for (int i = 0; i < 3; i++)
    for (int j = 0; j < 4; j++)
        M[i, j] = (float)(i * 0.2 + j * 0.3);

// запис значень в окремі комірки масиву
M[0, 1] = 0.35f;
M[2, 2] = 1.45f;



// оголошення тривимірного масиву цілих чисел розміром 3*4*5
ulong[, ,] A; // описати змінну (посилання) типу "тривимірний масив цілих чисел"

A = new ulong[3, 4, 5]; // виділити пам'ять для масиву

// записати в окремі комірки масиву значення
A[0, 2, 3] = 232;
A[0, 0, 1] = 300;
A[2, 3, 1] = 20000;

// ініціалізація двовимірного масиву
char[,] M = { { 'A', 'B', 'C', 'D', 'E' },
              { '8', '-', '=', '>', '+' },
              { '~', 'U', '&', '\\', '@' } };

              // ступінчаті масиви
// оголошення масиву з 4-х рядків, елементи якого мають тип ulong
ulong[][] A = new ulong[4][];

// виділення пам'яті для кожного рядка
A[0] = new ulong[5]; // у рядку з індексом 0 є 5 елементів
A[1] = new ulong[3]; // у рядку з індексом 1 є 3 елементи
A[2] = new ulong[6];
A[3] = new ulong[4];

// демонстрація доступу до елементів масиву A
A[0][0] = 2003;
A[0][4] = 199008;
A[1][2] = 302909;
A[3][3] = 10000000;

for (int i = 0; i < 6; i++)
    A[2][i] = (ulong)(i * i * i);


    // оголошення ступінчатого масиву
int[][] M = new int[5][];

// виділяється 50+100+30+60+40 = 280 комірок типу int
M[0] = new int[50];
M[1] = new int[100];
M[2] = new int[30];
M[3] = new int[60];
M[4] = new int[40];



// оголошення масиву з 10 двовимірних масивів дійсних чисел, кожен з яких має розмір 3*4
float[][,] M; // оголошення змінної типу масив двовимірних масивів

// виділення пам'яті для 10 двовимірних масивів типу float
M = new float[10][,];

// виділення пам'яті для кожного масиву розміром 3*4
for (int i = 0; i < 10; i++)
    M[i] = new float[3, 4];

// заповнення масивів довільними значеннями
for (int i = 0; i < 10; i++)
    for (int j = 0; j < 3; j++)
        for (int k = 0; k < 4; k++)
            M[i][j, k] = i * 10 + j * 3 + k;

// заповнити конкретні комірки
M[0][2, 1] = 20.44f;
M[2][0, 2] = 100.08f;


// приклад оголошення неявно типізованих одновимірних масивів
var A = new[] { 5, 10, 23, 16, 8 }; // тип елементів масиву - int, кількість елементів - 5
var B = new[] { true, false, false }; // тип елементів bool, кількість елементів - 3
var C = new[] { 'A', ';', '\'', '\n', '5', 'z' }; // тип елементів char, кількість - 6
var X = new[] { 2.86, 2.0, 3.5 }; // тип елементів double, кількість - 3

int d;
bool b;
char c;
float f;

d = A[2]; // d = 23
b = B[1]; // b = false
c = C[4]; // c = '5'
f = (float)X[2]; // f = 3.5


// неявно типізовані двовимірні масиви
// двовимірний масив розміром 4*3, тип елементів - int
var MI = new[,] { { 3, 5, -4 },
                  { 2, -1, 0 },
                  { 4, 9, 3 },
                  { -11, -5, 91 } };

// двовимірний масив розміром 3*4, тип елементів - char

var MC = new[,] { { '1', '2', '3', '4' },
                  { 'A', 'B', 'C', 'D' },
                  { 'e', 'f', 'g', 'h' } };
var MD = new[,] { { 0.2, 3.5 },
                  { 3.3, -3.88 } };
int i;
char c;
double d;

i = MI[2,1]; // i = 9
c = MC[0, 2]; // c = '3'
d = MD[1, 0]; // d = 3.3


// тривимірний типізований масив розміром 2*3*4, тип елементів масиву double
var M = new[, ,] {
                     {
                         { 1.0, 2.3, 4.5, 9.2 },
                         { -2.339, 5.66, 101.01, 0.1 },
                         { 10.34, 11.26, -8.239, 0.2 }
                     },
                     {
                         { 0.39, -8.45, 9.34, 0.223 },
                         { 19.239, 10.65, -8.08, 44.33 },
                         { 1, 2, 3, 5 }
                     }
                 };
double d;

d = M[0, 2, 3]; // d = 0.2
d = M[0, 0, 0]; // d = 1.0



// неявно типізований ступінчатий масив
var A = new[] {
                  new[] { 1, 3, 4, 10, 23, 46 },
                  new[] { 2, -4, 8 },
                  new[] { 0, -1, 2, -3, 0 }
              };
int d;
d = A[0][2]; // d = 2
d = A[2][3]; // d = -3



// неявно типізований ступінчатий масив масивів
// масив має 2 рядки, у кожному рядку два масиви розмірами 2*3 та 2*4
var B = new[] {
                  new[,] {
                             { 11, 12, 13 },
                             { 14, 15, 16 },
                         },
                  new[,] {
                             { 21, 22, 23, 24 },
                             { 25, 26, 27, 28 }
                         }
              };
int d;

d = B[0][1, 2]; // d = 16
d = B[1][0, 3]; // d = 24



// копіювання посилань на масиви
double[] M1 = new double[20]; // оголошення масиву M1 з 20 дійсних чисел
double[] M2; // для масиву M2 пам'ять не виділена

// заповнення масиву M1 довільними значеннями
for (int i = 0; i < 20; i++)
    M1[i] = 0.1 * i;

M2 = M1; // тепер M2 і M1 посилаються на одну й ту ж ділянку пам'яті

double d;
d = M2[3]; // d = 0.3




// демонстрація використання властивості Length
char[] C = new char[20];
float[] F = new float[100];
int[] I = new int[500];
int d;
d = C.Length; // d = 20
d = F.Length; // d = 100
d = I.Length; // d = 500



// властивість Length для багатовимірних масивів
uint[,] UI = new uint[200,10]; // двовимірний масив
bool[][] B = new bool[3][]; // ступінчатий масив
float[, ,] F = new float[3, 4, 5]; // тривимірний масив

B[0] = new bool[10];
B[1] = new bool[15];
B[2] = new bool[20];

int d;
d = UI.Length; // d = 200*10 = 2000
d = B[0].Length; // d = 10
d = B[1].Length; // d = 15
d = B.Length; // d = 3
d = F.Length; // d = 3*4*5 = 60




// сума елементів одновимірного масиву
int[] A = new int[10]; // оголошення масиву

// заповнення масиву довільними значеннями
for (int i = 0; i < A.Length; i++)
    A[i] = i;

// обчислення суми елементів масиву
int s = 0;
for (int i = 0; i < A.Length; i++)
    s = s + A[i];

// s = 45



// властивість Length для ступінчатих масивів
int[][] A = new int[5][];

A[0] = new int[10];
A[1] = new int[20];
A[3] = new int[25];

int d, d1, d2, d3;

d = A.Length; // d = 5;
d1 = A[0].Length; // d = 10
d2 = A[1].Length; // d = 20
//d3 = A[4].Length; - помилка, не має посилання на A[4]